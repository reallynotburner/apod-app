.container {
  padding: 20px 0px 20px 20px;
  overflow: scroll;
}

/*
  Lazy loading of images doesn't work if the image
  is the only thing making the card size work.

  When the html loads, all the inital cards are
  in the viewport, having no size.  So, lazy load
  loads ALL of them.

  To have a variable sized card we need to have
  width and height passed in the metadata of the
  record.  That way a placeholder/skeleton can 
  pre-size the card and push the later entries
  off-screen.

  Hard coding the card size would also work.
  but not as cool looking.
*/
.card {
  display: inline-block;
  position: relative;
  border-radius: 0.3rem;
  border: 5px solid transparent;
  transition: 0.15s ease-in-out;
  margin-right: 20px;
}

.card:focus {
  border-color: #0070f3;
  transform: scale(1.1);
}

.card > span {
  position: absolute;
  top: 0;
  left: 0; 
  overflow: hidden;
  display: none; /* Hover is how this shows up again */
}

.card:hover span,
.card:focus span,
.card:active span {
  display: block;
}

.cardOpacity {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: black;
  opacity: 0.0;
}

.card:hover .cardOpacity,
.card:focus .cardOpacity,
.card:active .cardOpacity {
  opacity: 0.7;
}

.swimlane {
  position: relative;
  display: flex;
  padding: 20px;
  flex-direction: row;
  overflow-x: scroll;
  scroll-behavior: smooth;
}

@media only screen and (max-width: 800px) {
  .swimlane {
    flex-direction: column;
  }

  .swimlane > .card {
    width: 100%;
    transform: scale(1.0);
  }

  .card > img {
    width: 100%;
  }
} 

.swimlaneTitle {
  padding-left: 20px;
}
